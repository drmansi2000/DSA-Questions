/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public static int height(TreeNode root)
    {
        if(root == null) return 0;
        return Math.max(height(root.left),height(root.right))+1;
    }
    public int findBottomLeftValue(TreeNode root)
    {
       if(root == null) return 0; 
       if(root.left == null && root.right == null)return root.val;
       Queue<TreeNode> q = new LinkedList<>();
       int h =  height(root);
    
       q.add(root);
       while(h!=1)
       {
           int t = q.size();
           while(t>0)
           {
                TreeNode n  = q.poll();
                t--;
                if(n.left != null) q.add(n.left);
                if(n.right != null) q.add(n.right);
           }
           h--;
       }
        TreeNode m  = q.poll();
        return m.val;
    }
}
